<<<<<<< HEAD
})
hz = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$hz <= 0.05)/nsim)[[2]]
})
})
royston = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$royston <= 0.05)/nsim)[[2]]
})
})
mardia
mardia = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$mardia <= 0.05)/nsim)[[2]]
})
})
hz = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$hz <= 0.05)/nsim)[[2]]
})
})
royston = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$royston <= 0.05)/nsim)[[2]]
})
})
c(mardia,hz,royston)
c(mardia = mardia,hz = hz,royston = royston)
mardia
mardia = unlist(mardia)
hz = unlist(hz)
royston = unlist(royston)
c(mardia = mardia,hz = hz,royston = royston)
cbind.data.frame(mardia = mardia,hz = hz,royston = royston)
mardia
mardia = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$mardia <= 0.05)/nsim)[[2]]
})
})
hz = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$hz <= 0.05)/nsim)[[2]]
})
})
royston = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$royston <= 0.05)/nsim)[[2]]
})
})
mardia
list(mardia = mardia,hz = hz,royston = royston)
list(mardia,hz,royston)
mardia
mardia = unlist(mardia)
hz = unlist(hz)
royston = unlist(royston)
cbind.data.frame(mardia = mardia,hz = hz,royston = royston)
cbind.data.frame(mardia = mardia,hz = hz,royston = royston)
cbind.data.frame(m, h, r)
mardia = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$mardia <= 0.05)/nsim)[[2]]
})
})
hz = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$hz <= 0.05)/nsim)[[2]]
})
})
royston = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$royston <= 0.05)/nsim)[[2]]
})
})
list(mardia,hz,royston)
m = unlist(mardia)
h = unlist(hz)
r = unlist(royston)
cbind.data.frame(m, h, r)
mardia = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$mardia <= 0.05)/nsim)[[2]]
})
})
hz = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$hz <= 0.05)/nsim)[[2]]
})
})
royston = lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$royston <= 0.05)/nsim)[[2]]
})
})
royston
append(marida, royston)
append(mardia, royston)
append(m = mardia, r = royston)
lapply(ppvals, function(x){
lapply(x, function(y){
(table(y$mardia <= 0.05)/nsim)[[2]]
(table(y$hz <= 0.05)/nsim)[[2]]
(table(y$royston <= 0.05)/nsim)[[2]]
})
})
cbind.data.frame(m, h, r)
lapply(ppvals, function(x){
lapply(x, function(y){
m = (table(y$mardia <= 0.05)/nsim)[[2]]
h = (table(y$hz <= 0.05)/nsim)[[2]]
r = (table(y$royston <= 0.05)/nsim)[[2]]
cbind.data.frame(m,h,r)
})
})
a = lapply(ppvals, function(x){
lapply(x, function(y){
m = (table(y$mardia <= 0.05)/nsim)[[2]]
h = (table(y$hz <= 0.05)/nsim)[[2]]
r = (table(y$royston <= 0.05)/nsim)[[2]]
res = cbind.data.frame(m,h,r)
})
})
a$`2`
do.call(a$`2`, rbind.data.frame)
do.call(rbind.data.frame, a$`2`)
hz
a = lapply(ppvals, function(x){
lapply(x, function(y){
m = (table(y$mardia <= 0.05)/nsim)[[2]]
h = (table(y$hz <= 0.05)/nsim)[[2]]
r = (table(y$royston <= 0.05)/nsim)[[2]]
res = cbind.data.frame(m,h,r)
})
do.call(rbind.data.frame, res)
})
lapply(ppvals, function(x){
lapply(x, function(y){
m = (table(y$mardia <= 0.05)/nsim)[[2]]
h = (table(y$hz <= 0.05)/nsim)[[2]]
r = (table(y$royston <= 0.05)/nsim)[[2]]
res = cbind.data.frame(m,h,r)
})
do.call(rbind.data.frame, res)
})
lapply(ppvals, function(x){
lapply(x, function(y){
m = (table(y$mardia <= 0.05)/nsim)[[2]]
h = (table(y$hz <= 0.05)/nsim)[[2]]
r = (table(y$royston <= 0.05)/nsim)[[2]]
res = cbind.data.frame(m,h,r)
return(res)
})
do.call(rbind.data.frame, res)
})
lapply(ppvals, function(x){
res = lapply(x, function(y){
m = (table(y$mardia <= 0.05)/nsim)[[2]]
h = (table(y$hz <= 0.05)/nsim)[[2]]
r = (table(y$royston <= 0.05)/nsim)[[2]]
cbind.data.frame(m,h,r)
})
do.call(rbind.data.frame, res)
})
mardia
hz
royston
result = lapply(ppvals, function(x){
res = lapply(x, function(y){
mardia = (table(y$mardia <= 0.05)/nsim)[[2]]
hz = (table(y$hz <= 0.05)/nsim)[[2]]
royston = (table(y$royston <= 0.05)/nsim)[[2]]
cbind.data.frame(mardia,hz,royston)
})
do.call(rbind.data.frame, res)
})
result
set.seed(1234)
p = c(2:10) #i
n=c(10,20,30,50,100,250,500) #j
nsim = 10000 #k
pvals = list()
npvals = list()
ppvals = list()
for(k in 1:length(p)){
for(i in 1:length(n)){
for(j in 1:nsim){
marg = rep("norm",p[k])
par = rep(list(list(mean=0,sd=1)),p[k])
x = mvdc(copula = archmCopula(family = "clayton", param = 2, dim = p[k]), marg, par)
dat = rMvdc(n[i], x)
mard=mardiaTest(dat)
henze=hzTest(dat)
roys=roystonTest(dat)
hz.p = henze@p.value
roys.p = roys@p.value
nn = nrow(dat)
if (nn <= 20) {mard.p = min(mard@p.value.small, mard@p.value.kurt)}
if (nn >  20) {mard.p = min(mard@p.value.skew, mard@p.value.kurt)}
pvals[[j]] = c(mard.p, hz.p, roys.p)
pval = do.call(rbind.data.frame, pvals)
names(pval) = c("mardia", "hz", "royston")
}
npvals[[i]] = pval
}
names(npvals) = n
ppvals[[k]] = npvals
names(ppvals)[[k]] = p[k]
}
print(paste0("simulation", j))
print(paste0("simulation: ", j))
set.seed(1234)
p = c(2:10) #i
n=c(10,20,30,50,100,250,500) #j
nsim = 10000 #k
pvals = list()
npvals = list()
ppvals = list()
for(k in 1:length(p)){
for(i in 1:length(n)){
for(j in 1:nsim){
marg = rep("norm",p[k])
par = rep(list(list(mean=0,sd=1)),p[k])
x = mvdc(copula = archmCopula(family = "clayton", param = 2, dim = p[k]), marg, par)
dat = rMvdc(n[i], x)
mard=mardiaTest(dat)
henze=hzTest(dat)
roys=roystonTest(dat)
hz.p = henze@p.value
roys.p = roys@p.value
nn = nrow(dat)
if (nn <= 20) {mard.p = min(mard@p.value.small, mard@p.value.kurt)}
if (nn >  20) {mard.p = min(mard@p.value.skew, mard@p.value.kurt)}
pvals[[j]] = c(mard.p, hz.p, roys.p)
pval = do.call(rbind.data.frame, pvals)
names(pval) = c("mardia", "hz", "royston")
print(paste0("simulation: ", j))
}
npvals[[i]] = pval
print(paste0("sample size: ", i))
}
names(npvals) = n
ppvals[[k]] = npvals
names(ppvals)[[k]] = p[k]
print(paste0("# variables: ", k))
}
plant.df = PlantGrowth
plant.df$group = factor(plant.df$group,
labels = c("Control", "Treatment 1", "Treatment 2"))
head(plant.df)
require(ggplot2)
ggplot(plant.df, aes(x = group, y = weight)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Treatment Group") +
ylab("Dried weight of plants")
ggplot(plant.df, aes(x = group, y = weight)) +
geom_boxplot(fill = "grey80", colour = "red") +
scale_x_discrete() + xlab("Treatment Group") +
ylab("Dried weight of plants")
ggplot(plant.df, aes(x = group, y = weight)) +
geom_boxplot(fill = "white", colour = "red") +
scale_x_discrete() + xlab("Treatment Group") +
ylab("Dried weight of plants")
ggplot(plant.df, aes(x = group, y = weight)) +
geom_boxplot(fill = "white", colour = "red") +
scale_x_discrete() + xlab("Group") +
ylab("Dried weight of plants")
plant.mod1 = lm(weight ~ group, data = plant.df)
summary(plant.mod1)
plant.df = iris
head(plant.df)
ggplot(plant.df, aes(x = Species, y = Sepal.Length)) +
geom_boxplot(fill = "white", colour = "red") +
scale_x_discrete() + xlab("Group") +
ylab("Dried weight of plants")
plant.mod1 = lm(Sepal.Length ~ Species, data = plant.df)
summary(plant.mod1)
library(combinat)
c = combn(40, 10)
c = 847660528
p = 0.2^10
p2 = 0.8^30
pr = c*p*p2
pr
rep("Factor", ncol)
?rep
ncol = 7
rep("Factor", ncol)
seq(1:ncol)
rep("Factor", ncol-1)
seq(1:ncol-1)
seq(1:(ncol-1))
rep("Factor", ncol-1)
paste(rep("Factor", ncol-1), seq(1:(ncol-1)),  sep = " ")
c("Observation", colnames)
colnames = paste(rep("Factor", ncol-1), seq(1:(ncol-1)),  sep = " ")
c("Observation", colnames)
cnames = paste(rep("Factor", ncol-1), seq(1:(ncol-1)),  sep = " ")
c("Observation", cnames)
?ncol
library(MASS)
library(vcd)
data(quine)
fit <- goodfit(quine$Days)
summary(fit)
rootogram(fit)
?rootogram
dummy <- rnbinom(200, size = 1.5, prob = 0.8)
observed <- table(dummy)
fitted1 <- dnbinom(as.numeric(names(observed)),
size = 1.5, prob = 0.8) * sum(observed)
fitted2 <- dnbinom(as.numeric(names(observed)),
size = 2, prob = 0.6) * sum(observed)
rootogram(observed, fitted1)
Ord_plot(quine$Days)
distplot(quine$Days, type="poisson")
head(quine)
distplot(quine$Days, type="poisson")
distplot(quine$Days, type="poisson")
Ord_plot(quine$Days)
rootogram(fit)
Ord_plot(quine$Days)
distplot(quine$Days, type="poisson")
?distplot
rootogram(fit)
?rootogram
## Simulated data examples:
dummy <- rnbinom(200, size = 1.5, prob = 0.8)
observed <- table(dummy)
fitted1 <- dnbinom(as.numeric(names(observed)),
size = 1.5, prob = 0.8) * sum(observed)
fitted2 <- dnbinom(as.numeric(names(observed)),
size = 2, prob = 0.6) * sum(observed)
rootogram(observed, fitted1)
oberved
observed
fitted1
distplot(quine$Days, type="poisson")
Ord_plot(quine$Days)
?Ord_plot
Ord_plot(quine$Days)
### Distribution plot
distplot(quine$Days, type="poisson")
rootogram(fit)
mod1 <- glm(Days~Age+Sex, data=quine, family="poisson")
summary(mod1)
anova(mod1, test="Chisq")
library(AER)
install.packages("AER")
deviance(mod1)/mod1$df.residual
dispersiontest(mod1)
library(car)
influencePlot(mod1)
?influencePlot
library(pscl)
mod2 <- zeroinfl(Days~Age+Sex, data=quine, dist="poisson")
AIC(mod1, mod2)
install.packages("pscl")
library(pscl)
mod2 <- zeroinfl(Days~Age+Sex, data=quine, dist="poisson")
AIC(mod1, mod2)
res <- residuals(mod1, type="deviance")
plot(log(predict(mod1)), res)
abline(h=0, lty=2)
qqnorm(res)
qqline(res)
qqnorm(res)
qqline(res)
qqline(res)
plot(log(predict(mod1)), res)
plot(log(predict(mod1)), res, xlab = "log(prediction)", ylab = "Residual")
abline(h=0, lty=2)
### Residual qq plot
qqnorm(res)
qqline(res)
install.packages("faraway")
library(faraway)
halfnorm(residuals(mod1))
plot(Days~Age, data=quine)
prs  <- predict(mod1, type="response", se.fit=TRUE)
pris <- data.frame("pest"=prs[[1]], "lwr"=prs[[1]]-prs[[2]], "upr"=prs[[1]]+prs[[2]])
points(pris$pest ~ quine$Age, col="red")
points(pris$lwr  ~ quine$Age, col="pink", pch=19)
points(pris$upr  ~ quine$Age, col="pink", pch=19)
plot(Days~Age, data=quine)
plot(Days~Age, data=quine)
prs  <- predict(mod1, type="response", se.fit=TRUE)
plot(Days~Age, data=quine)
prs  <- predict(mod1, type="response", se.fit=TRUE)
pris <- data.frame("pest"=prs[[1]], "lwr"=prs[[1]]-prs[[2]], "upr"=prs[[1]]+prs[[2]])
plot(Days~Age, data=quine)
prs  <- predict(mod1, type="response", se.fit=TRUE)
pris <- data.frame("pest"=prs[[1]], "lwr"=prs[[1]]-prs[[2]], "upr"=prs[[1]]+prs[[2]])
points(pris$pest ~ quine$Age, col="red")
points(pris$lwr  ~ quine$Age, col="pink", pch=19)
points(pris$upr  ~ quine$Age, col="pink", pch=19)
plot(Days~Age, data=quine)
prs  <- predict(mod1, type="response", se.fit=TRUE)
pris <- data.frame("pest"=prs[[1]], "lwr"=prs[[1]]-prs[[2]], "upr"=prs[[1]]+prs[[2]])
points(pris$pest ~ quine$Age, col="red")
points(pris$lwr  ~ quine$Age, col="pink", pch=19)
points(pris$upr  ~ quine$Age, col="pink", pch=19)
head(quine)
### Residual plot
res <- residuals(mod1, type="deviance")
plot(log(predict(mod1)), res, xlab = "log(prediction)", ylab = "Residual")
abline(h=0, lty=2)
### Pearson Residual plot
res <- residuals(mod1, type="pearson")
plot(log(predict(mod1)), res, xlab = "log(prediction)", ylab = "Pearson Residual")
abline(h=0, lty=2)
?residuals
### Distribution plot
distplot(quine$Days, type="poisson")
?rootogram
rootogram(mod1)
?goodfit
head(quine)
fit <- goodfit(quine$Days, type = "poisson")
summary(mod1)
rootogram(mod1)
### Root gram
library(MASS)
library(vcd)
data(quine)
head(quine)
fit <- goodfit(quine$Days, type = "poisson")
summary(fit)
rootogram(fit)
###  Residual plot
res <- residuals(mod1, type="raw")
plot(log(predict(mod1)), res, xlab = "log(prediction)", ylab = "Residual")
abline(h=0, lty=2)
###  Residual plot
res <- vcd::residuals(mod1, type="raw")
?residuals
###  Residual plot
res <- residuals(mod1, type="raw")
?residuals
data = read.table("~/Documents/GitHub/turcosa_devtools/testData/logistic.txt", header = T, sep = ";")
head(data)
data = read.table("~/Documents/GitHub/turcosa_devtools/testData/logistic.txt", header = T, sep = ";", dec = ",")
head(data)
### Root gram
library(MASS)
library(vcd)
fit <- goodfit(data$gre, type = "poisson")
summary(fit)
rootogram(fit)
### Distribution plot
distplot(data$gre, type="poisson")
mod1 <- glm(gre~admit+gpa+rank, data=data, family="poisson")
summary(mod1)
anova(mod1, test="Chisq")
mod1 <- glm(gre~admit+gpa+rank, data=data, family="poisson")
influencePlot(mod1)
###  Residual plot
res <- residuals(mod1, type="raw")
plot(predict(mod1), res, xlab = "Predictions", ylab = "Pearson Residuals")
### Pearson Residual plot
res <- residuals(mod1, type="pearson")
plot(predict(mod1), res, xlab = "Predictions", ylab = "Pearson Residuals")
abline(h=0, lty=2)
### Deviance Residual plot
res <- residuals(mod1, type="deviance")
plot(mod1), res, xlab = "Predictions", ylab = "Deviance Residual")
plot(predict(mod1), res, xlab = "Predictions", ylab = "Deviance Residuals")
abline(h=0, lty=2)
### Residual qq plot
qqnorm(res)
qqline(res)
plot(Days~Age, data=quine)
prs  <- predict(mod1, type="response", se.fit=TRUE)
pris <- data.frame("pest"=prs[[1]], "lwr"=prs[[1]]-prs[[2]], "upr"=prs[[1]]+prs[[2]])
points(pris$pest ~ quine$Age, col="red")
points(pris$lwr  ~ quine$Age, col="pink", pch=19)
points(pris$upr  ~ quine$Age, col="pink", pch=19)
plot(gre~gpa, data=data)
plot(gre~gpa, data=data)
prs  <- predict(mod1, type="response", se.fit=TRUE)
pris <- data.frame("pest"=prs[[1]], "lwr"=prs[[1]]-prs[[2]], "upr"=prs[[1]]+prs[[2]])
plot(gre~gpa, data=data)
plot(gre~gpa, data=data)
head(data)
plot(gre~admit, data=data)
str(data)
data$admit = as.factor(data$admit)
str(data)
data$gpa = as.factor(data$gpa)
plot(gre~gpa, data=data)
head(data)
plot(gre~admit, data=data)
prs  <- predict(mod1, type="response", se.fit=TRUE)
pris <- data.frame("pest"=prs[[1]], "lwr"=prs[[1]]-prs[[2]], "upr"=prs[[1]]+prs[[2]])
str(data)
points(pris$pest ~ data$gre, col="red")
points(pris$lwr  ~ data$gre, col="pink", pch=19)
points(pris$upr  ~ data$gre, col="pink", pch=19)
plot(gre~admit, data=data)
prs  <- predict(mod1, type="response", se.fit=TRUE)
pris <- data.frame("pest"=prs[[1]], "lwr"=prs[[1]]-prs[[2]], "upr"=prs[[1]]+prs[[2]])
points(pris$pest ~ data$gre, col="red")
points(pris$lwr  ~ data$gre, col="pink", pch=19)
points(pris$upr  ~ data$gre, col="pink", pch=19)
### Residual qq plot
qqnorm(res)
qqline(res)
shiny::runApp("~/Documents/GitHub/BV/")
shiny::runApp("~/Documents/GitHub/BV/")
shiny::runApp("~/Documents/GitHub/BV/")
shiny::runApp("~/Documents/GitHub/BV/")
=======
data = read.table("~/Downloads/RBC_data.txt", header = T, sep = "\t")
head(data)
subject = "subject"
timeRange = c("t1","t2","t3","t4","t5","t6","t7","t8","t9","t10")
replicate = "replicate"
analyte = "RBC"
gender = "gender"
time = "time"
data = wideToLong(data, subject, gender, timeRange, replicate, analyte)
head(data)
dim(data)
CVresult = "original"
if(CVresult == "transformed" || CVresult == "transformBack" ){
analyteValue = data$value
loganalytevalue = log(analyteValue)
# logdata = data
data$value = loganalytevalue
}
genderLevels = levels(data[,gender])
dataHomogenity = data
analyteValue = data$value
if(is.null(analyteValue)){
analyteValue = data[,analyte]
}
subjects = as.factor(data[,subject])
means <- tapply(analyteValue, subjects, mean)
names(means) = levels(subjects)
genderU = cbind.data.frame(unique(data[-c(3:6)]))
gender2 = genderU[with(genderU, order(subject)), ]
dataTtest = cbind.data.frame(gender2, means)
bartlet = bartlett.test(dataTtest[,means], dataTtest[, gender])
head(dataTtest)
gender
dataTtest[,means]
bartlet = bartlett.test(dataTtest$means, dataTtest[, gender])
HomogenityGenderResult =  data.frame(matrix(NA,1,5))
names(HomogenityGenderResult) = c("Test", "Statistic", "df", "p-value", "Result")
HomogenityGenderResult[1,1] = "Bartlett"
HomogenityGenderResult[1,2] = bartlet$statistic[[1]]
HomogenityGenderResult[1,3] = bartlet$parameter[[1]]
HomogenityGenderResult[1,4] = bartlet$p.value[[1]]
HomogenityGenderResult[1,5] = if(bartlet$p.value > 0.05){"Homogeneous"}else{"Heterogeneous"}
if(bartlet$p.value > 0.05){ varEqual = TRUE}else{ varEqual = FALSE}
ttest = t.test(as.formula(paste0("means~",gender)), data = dataTtest, var.equal = varEqual)
sd = tapply(dataTtest[,"means"], dataTtest[,gender], sd)
ttestResult =  data.frame(matrix(NA,1,7))
names(ttestResult) = c("Analyte", paste0("Mean (", genderLevels[1],")"), paste0("SD (", genderLevels[1],")"), paste0("Mean (", genderLevels[2],")"), paste0("SD (", genderLevels[2],")"), "p-value", "Result")
ttestResult[1,1] = analyte
ttestResult[1,2] = round(ttest$estimate[[1]],2)
ttestResult[1,3] = round(sd[[1]],2)
ttestResult[1,4] = round(ttest$estimate[[2]],2)
ttestResult[1,5] = round(sd[[2]],2)
ttestResult[1,6] = round(ttest$p.value,2)
ttestResult[1,7] = if(ttest$p.value > 0.05){"No difference"}else{"Different"}
if(is.null(data$value)){
dataHomogenity2 = data[,c(subject, analyte, gender)]
vars =  tapply(dataHomogenity2[,analyte], as.factor(dataHomogenity2[,subject]), var)
}else{
dataHomogenity2 = data[,c(subject, "value", gender)]
vars =  tapply(dataHomogenity2$value, as.factor(dataHomogenity2[,subject]), var)
}
names(vars) = levels(as.factor(dataHomogenity2[,subject]))
genderU = cbind.data.frame(unique(dataHomogenity2[-2]))
gender2 = genderU[with(genderU, order(subject)), ]
dataHomogenity3 = cbind.data.frame(vars, gender2)
bartlet = bartlett.test(dataHomogenity3[,vars], dataHomogenity3[,gender])
HomogenitySIAResult =  data.frame(matrix(NA,1,5))
names(HomogenitySIAResult) = c("Test", "Statistic", "df", "p-value", "Result")
HomogenitySIAResult =  data.frame(matrix(NA,1,5))
names(HomogenitySIAResult) = c("Test", "Statistic", "df", "p-value", "Result")
HomogenitySIAResult[1,1] = "Bartlett"
bartlet = bartlett.test(dataHomogenity3[,vars], dataHomogenity3[,gender])
bartlet = bartlett.test(dataHomogenity3$vars, dataHomogenity3[,gender])
HomogenitySIAResult =  data.frame(matrix(NA,1,5))
names(HomogenitySIAResult) = c("Test", "Statistic", "df", "p-value", "Result")
HomogenitySIAResult[1,1] = "Bartlett"
HomogenitySIAResult[1,2] = bartlet$statistic[[1]]
HomogenitySIAResult[1,3] = bartlet$parameter[[1]]
HomogenitySIAResult[1,4] = bartlet$p.value[[1]]
HomogenitySIAResult[1,5] = if(bartlet$p.value > 0.05){"Homogeneous"}else{"Heterogeneous"}
if(bartlet$p.value > 0.05){ varEqual = TRUE}else{ varEqual = FALSE}
formula = as.formula(paste0("vars ~ ", gender))
ttest = t.test(formula, data = dataHomogenity3, var.equal = varEqual)
sd = tapply(dataHomogenity3$vars, dataHomogenity3[,gender], sd)
ttestResultSIA =  data.frame(matrix(NA,1,7))
names(ttestResultSIA) = c("Analyte", paste0("Mean (", genderLevels[1],")"), paste0("SD (", genderLevels[1],")"), paste0("Mean (", genderLevels[2],")"), paste0("SD (", genderLevels[2],")"), "p-value", "Result")
ttestResultSIA[1,1] = analyte
ttestResultSIA[1,2] = round(ttest$estimate[[1]],2)
ttestResultSIA[1,3] = round(sd[[1]],2)
ttestResultSIA[1,4] = round(ttest$estimate[[2]],2)
ttestResultSIA[1,5] = round(sd[[2]],2)
ttestResultSIA[1,6] = round(ttest$p.value,2)
ttestResultSIA[1,7] = if(ttest$p.value > 0.05){"No difference"}else{"Different"}
subsetResult = list(homogenity = HomogenityGenderResult, ttest = ttestResult, homogenitySIA = HomogenitySIAResult, ttestSIA = ttestResultSIA)
subsetResult
runApp('Documents/BV')
rm(list=ls())
runApp('Documents/BV')
shiny::runGitHub("https://github.com/aaronjfisher/interAdapt/tree/master/r_package/inst/interAdapt")
?shiny::runGitHub
shiny::runUrl("https://github.com/aaronjfisher/interAdapt/tree/master/r_package/inst/interAdapt")
shiny::runApp('Documents/GitHub/BV')
shiny::runApp('Documents/GitHub/BV')
runApp('Documents/GitHub/BV')
runApp('Documents/GitHub/BV')
runApp('Documents/GitHub/BV')
runApp('Documents/GitHub/BV')
?lme
?lme4::lmer
shiny::datatable
?webshot::install_phantomjs
runApp('Documents/GitHub/BV')
runApp('Documents/GitHub/BV')
runApp('Documents/GitHub/BV')
runApp('Documents/GitHub/BV')
runApp('Documents/GitHub/BV')
>>>>>>> 96f0c6b24c0dd3925de9a5c9738023c36fa02743
