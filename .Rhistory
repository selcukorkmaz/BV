anova[[1]][[1]][[1]]
rep(((replicateNumber^2)*((1/ni[i])-(1/sum(ni))))/(47),ti[i])
anova[[1]][[1]][[1]]
anova
# data = read.table("~/Documents/Studies/BiologicalVariation/Rcodes/data.txt",
#                   header = T, sep = "\t")
# head(data)
#
# analyte = "Measurement"
# subject = "Subject"
# gender = "Gender"
# replicate = "Replicate"
# time = "Time"
# decimal = 3
#
# outlierS1 = "subjetcs"; outlierS2 = TRUE; outlierS3 = TRUE;
# showResult = "lnmom"
#
# data = momTransformation(data = data, time = time, measure = analyte, method ="lnmom")
#
# head(data)
#
#
#
# out = outlier(data = data, analyte=analyte, subject=subject, replicate=replicate,
#               time=time, gender=gender, decimal =3, outlierS1 = "subjetcs", outlierS2 = TRUE, outlierS3 = TRUE,
#               showResult = showResult)
#
# data = out$dataWithoutOutliers
#
# analyte = "value"
# subject = "subject"
# gender = "gender"
# replicate = "replicate"
# time = "time"
# alpha = 0.05
# CVresult = "lnmom"
#
# head(data)
data = read.table("~/Documents/Studies/BiologicalVariation/Rcodes/data.txt",
header = T, sep = "\t")
head(data)
analyte = "Measurement"
subject = "Subject"
gender = "Gender"
replicate = "Replicate"
time = "Time"
decimal = 3
outlierS1 = "subjetcs"; outlierS2 = TRUE; outlierS3 = TRUE;
showResult = "lnmom"
data = momTransformation(data = data, time = time, measure = analyte, method ="lnmom")
head(data)
out = outlier(data = data, analyte=analyte, subject=subject, replicate=replicate,
time=time, gender=gender, decimal =3, outlierS1 = "subjetcs", outlierS2 = TRUE, outlierS3 = TRUE,
showResult = showResult)
data = out$dataWithoutOutliers
analyte = "value"
subject = "subject"
gender = "gender"
replicate = "replicate"
time = "time"
alpha = 0.05
CVresult = "lnmom"
head(data)
dim(data)
library(nlme)
alpha = as.numeric(alpha)
lower_title = paste0("Lower Limit (",(1-alpha)*100,"%)")
upper_title = paste0("Upper Limit (",(1-alpha)*100,"%)")
lowerMean_title = paste0("Lower Limit (",(1-alpha)*100,"%)")
upperMean_title = paste0("Upper Limit (",(1-alpha)*100,"%)")
data = data[,c("subject", "gender", "time", "replicate", "value")]
# data = momTransformation(data = data, time = time, measure = "value", method ="lnmom")
dataGender = split(data, data[,"gender"])
data[,"subject"] = as.factor(data[,"subject"])
data[,"replicate"] = as.factor(data[,"replicate"])
data[,"time"] = as.factor(data[,"time"])
bv <- lme(value ~1, random=~1|subject/time, data=data)
N <- nrow(data)
r <- length(unique(data[,"subject"]))
ni <- as.numeric(table(data[ ,"subject"]))
sgConstant <- (1/(r - 1))*sum((ni^2)*(1/ni - 1/N))
ti = ni/2
replicateNumber = 2
w1List = list()
for(i in 1:length(ti)){
w1List[[i]] = rep(((replicateNumber^2)*((1/ni[i])-(1/sum(ni))))/(anova[[1]][[1]][[1]]),ti[i])
}
w3List = list()
for(i in 1:length(ti)){
w3List[[i]] = rep((replicateNumber^2)*((1/sqrt(replicateNumber^2)) - (1/ni[i]))/(bv$dims$ngrps[["time"]]-bv$dims$ngrps[["subject"]]),ti[i])
}
w1uList1 = list()
for(i in 1:length(ti)){
w1uList1[[i]] = sum(rep(1/sqrt(replicateNumber^2), ti[i]))
}
w3uList1 = list()
for(i in 1:length(ti)){
w3uList1[[i]] = ti[i]/sum(rep(1/sqrt(replicateNumber^2), ti[i]))
}
w1 = do.call("sum", w1List)
w1List
w2
w3
bv
summary(bv)
bv$dims
bv$dims$ngrps[[2]]
rep(((replicateNumber^2)*((1/ni[i])-(1/sum(ni))))/(bv$dims$ngrps[[2]]-1-1),ti[i])
ti[i]
rep(((replicateNumber^2)*((1/ni[i])-(1/sum(ni))))/(bv$dims$ngrps[[2]]-1),ti[i])
runApp('Documents/GitHub/BV')
runApp('Documents/GitHub/BV')
data = read.table("~/Documents/Studies/BiologicalVariation/Rcodes/data.txt",
header = T, sep = "\t")
head(data)
analyte = "Measurement"
subject = "Subject"
gender = "Gender"
replicate = "Replicate"
time = "Time"
decimal = 3
outlierS1 = "subjetcs"; outlierS2 = TRUE; outlierS3 = TRUE;
showResult = "lnmom"
data = momTransformation(data = data, time = time, measure = analyte, method ="lnmom")
head(data)
out = outlier(data = data, analyte=analyte, subject=subject, replicate=replicate,
time=time, gender=gender, decimal =3, outlierS1 = "subjetcs", outlierS2 = TRUE, outlierS3 = TRUE,
showResult = showResult)
data = out$dataWithoutOutliers
analyte = "value"
subject = "subject"
gender = "gender"
replicate = "replicate"
time = "time"
alpha = 0.05
CVresult = "lnmom"
head(data)
library(nlme)
alpha = as.numeric(alpha)
lower_title = paste0("Lower Limit (",(1-alpha)*100,"%)")
upper_title = paste0("Upper Limit (",(1-alpha)*100,"%)")
lowerMean_title = paste0("Lower Limit (",(1-alpha)*100,"%)")
upperMean_title = paste0("Upper Limit (",(1-alpha)*100,"%)")
data = data[,c("subject", "gender", "time", "replicate", "value")]
# data = momTransformation(data = data, time = time, measure = "value", method ="lnmom")
dataGender = split(data, data[,"gender"])
data[,"subject"] = as.factor(data[,"subject"])
data[,"replicate"] = as.factor(data[,"replicate"])
data[,"time"] = as.factor(data[,"time"])
bv <- lme(value ~1, random=~1|subject/time, data=data)
N <- nrow(data)
r <- length(unique(data[,"subject"]))
ni <- as.numeric(table(data[ ,"subject"]))
sgConstant <- (1/(r - 1))*sum((ni^2)*(1/ni - 1/N))
ti = ni/2
replicateNumber = 2
w1List = list()
for(i in 1:length(ti)){
w1List[[i]] = rep(((replicateNumber^2)*((1/ni[i])-(1/sum(ni))))/(bv$dims$ngrps[[2]]-1),ti[i])
}
w3List = list()
for(i in 1:length(ti)){
w3List[[i]] = rep((replicateNumber^2)*((1/sqrt(replicateNumber^2)) - (1/ni[i]))/(bv$dims$ngrps[["time"]]-bv$dims$ngrps[["subject"]]),ti[i])
}
w1uList1 = list()
for(i in 1:length(ti)){
w1uList1[[i]] = sum(rep(1/sqrt(replicateNumber^2), ti[i]))
}
w3uList1 = list()
for(i in 1:length(ti)){
w3uList1[[i]] = ti[i]/sum(rep(1/sqrt(replicateNumber^2), ti[i]))
}
w1 = do.call("sum", w1List)
w2 = sgConstant
w3 = do.call("sum", w3List)
w1
w2
w3
w1u = sum((1/ti))/sum((1/(ti*(ti/unlist(w1uList1)))))
w2u = ti[1]/sum(1/(ti*(ti/(0.5*(ti)))))
w3u = (bv$dims$ngrps[["time"]]-bv$dims$ngrps[["subject"]]) / sum((ti-1)/unlist(w3uList1))
c2u = (w2u-w1u)/(w3u)
c3u = w2u-1-c2u
c2 = w1u/w3u
c3 = 0
alpha = alpha
inf = 999999999
anova = summary(aov(value ~ subject/time, data))
sigma2_analytical = anova[[1]][[2]][3]/anova[[1]][[1]][3]
sigma2_within = (anova[[1]][[2]][2]/anova[[1]][[1]][2]-anova[[1]][[2]][3]/anova[[1]][[1]][3])/w3
sigma2_between = (anova[[1]][[2]][1]/anova[[1]][[1]][1] - sigma2_analytical-w1*sigma2_within)/w2
grandMean = mean(data$value)
seGrandMean =  sd(data$value)/sqrt(N)
llMean = grandMean-qnorm(1-alpha/2)*seGrandMean
ulMean = grandMean+qnorm(1-alpha/2)*seGrandMean
sigma_analytical = sqrt(sigma2_analytical)
sigma_within = sqrt(sigma2_within)
sigma_between = ifelse(sigma2_between > 0, sqrt(sigma2_between),0)
sigma_total = sqrt(sigma2_analytical + sigma2_within + sigma2_between)
sigma_total
CV_analytical = abs(sigma_analytical/grandMean)
CV_within = abs(sigma_within/grandMean)
CV_between = abs(sigma_between/grandMean)
CV_total = abs(sigma_total/grandMean)
CV_total
CVresult
ll_analytical = sqrt((sigma_analytical^2)/qf(alpha/2, bv$dims$ngrps[[1]], inf, lower.tail = F))
ul_analytical = sqrt((sigma_analytical^2)/qf(alpha/2, bv$dims$ngrps[[1]], inf, lower.tail = T))
lower_analytical = ll_analytical/grandMean
upper_analytical = ul_analytical/grandMean
lower_analytical
upper_analytical
sigma2_between = sigma_between^2
sigma2_within = sigma_within^2
sigma2_analytical = sigma_analytical^2
msu_within = 2*sigma2_within+sigma2_analytical
msu_between = sigma2_between*sgConstant + sigma2_analytical +  sigma2_within*2
dfbetween = (bv$dims$ngrps[[2]]-1)
dfwithin = (bv$dims$ngrps[[1]]-bv$dims$ngrps[[2]])
dfanalytical = (bv$dims$ngrps[[1]])
g1 = 1-1/(qf(alpha/2, dfbetween, inf, lower.tail = F))
g2 = 1-1/(qf(alpha/2, dfwithin, inf, lower.tail = F))
g3 = 1-1/(qf(alpha/2, dfanalytical, inf, lower.tail = F))
h1 =1/(qf(1-alpha/2, dfbetween, inf, lower.tail = F))-1
h2 = 1/(qf(1-alpha/2, dfwithin, inf, lower.tail = F))-1
h3 = 1/(qf(1-alpha/2, dfanalytical, inf, lower.tail = F))-1
g12 = (((qf(alpha/2, dfbetween, dfwithin, lower.tail = F)-1)^2)-g1^2*(qf(alpha/2, dfbetween, dfwithin, lower.tail = F)^2)-h2^2)/(qf(alpha/2, dfbetween, dfwithin, lower.tail = F))
g13 = (((qf(alpha/2, dfbetween, dfanalytical, lower.tail = F)-1)^2)-g1^2*(qf(alpha/2, dfbetween, dfanalytical, lower.tail = F)^2)-h3^2)/(qf(alpha/2, dfbetween, dfanalytical, lower.tail = F))
g23 = (((qf(alpha/2, dfwithin, dfanalytical, lower.tail = F)-1)^2)-g2^2*(qf(alpha/2, dfwithin, dfanalytical, lower.tail = F))^2-h3^2)/(qf(alpha/2, dfwithin, dfanalytical, lower.tail = F))
g32 = (((qf(alpha/2, dfanalytical, dfwithin, lower.tail = F)-1)^2)-g3^2*(qf(alpha/2, dfanalytical, dfwithin, lower.tail = F))^2-h2^2)/(qf(alpha/2, dfanalytical, dfwithin, lower.tail = F))
h12 = (((1-qf(1-alpha/2,  dfbetween, dfwithin, lower.tail = F))^2)-h1^2*(qf(1-alpha/2,  dfbetween, dfwithin, lower.tail = F))^2-g2^2)/(qf(1-alpha/2,  dfbetween, dfwithin, lower.tail = F))
h13 = (((1-qf(1-alpha/2,  dfbetween, dfanalytical, lower.tail = F))^2)-h1^2*(qf(1-alpha/2,  dfbetween, dfanalytical, lower.tail = F))^2-g3^2)/(qf(1-alpha/2,  dfbetween, dfanalytical, lower.tail = F))
h23 = (((1-qf(1-alpha/2, dfwithin, dfanalytical, lower.tail = F))^2)-h2^2*(qf(1-alpha/2, dfwithin, dfanalytical, lower.tail = F))^2-g3^2)/(qf(1-alpha/2, dfwithin, dfanalytical, lower.tail = F))
h32 = (((1-qf(1-alpha/2, dfanalytical, dfwithin, lower.tail = F))^2)-h3^2*(qf(1-alpha/2, dfanalytical, dfwithin, lower.tail = F))^2-g2^2)/(qf(1-alpha/2, dfanalytical, dfwithin, lower.tail = F))
VLba = (g2^2)*(msu_within^2)+(h3^2)*(sigma2_analytical^2)+g23*msu_within*sigma2_analytical
VUba = (h2^2)*(msu_within^2)+(g3^2)*(sigma2_analytical^2)+h23*msu_within*sigma2_analytical
VLa = g1^2*msu_between^2+h2^2*c2^2*msu_within^2+h3^2*c3^2*sigma2_analytical^2+g12*c2*msu_between*msu_within+g13*abs(c3)*msu_between*sigma2_analytical
VLa2 = h1^2*msu_between^2+g2^2*c2^2*msu_within^2+g3^2*c3^2*sigma2_analytical^2+h12*c2*msu_between*msu_within+h13*abs(c3)*msu_between*sigma2_analytical
ll_within = sqrt((msu_within-sigma2_analytical-sqrt(VLba))/2)
ul_within = sqrt((msu_within-sigma2_analytical+sqrt(VUba))/2)
lower_within = ll_within/grandMean
upper_within = ul_within/grandMean
ll_between = sqrt((msu_between - msu_within - sqrt(VLa))/sgConstant)
ul_between = sqrt((msu_between - msu_within + sqrt(VLa2))/sgConstant)
lower_between = ll_between/grandMean
upper_between = ul_between/grandMean
lower_between
upper_between
c34 = (sgConstant-2)/2
c35 = sgConstant-1-c34
ll_total = sqrt((msu_between + c34*msu_within + c35*sigma2_analytical- sqrt(VLa))/sgConstant)
ul_total = sqrt((msu_between + c34*msu_within + c35*sigma2_analytical+ sqrt(VLa2))/sgConstant)
lower_total = ll_total/grandMean
upper_total = ul_total/grandMean
lower_total
upper_total
setwd("~/Documents/GitHub/Covid2019Turkey/")
test = read.table("www/data/testsNew.txt", header=FALSE, sep = "\t")
head(test)
colnames(test) = c("Country", "Date", "Test", "Positive", "Positive_Rate", "Test_million_population", "Positive_million_population", "Ref")
head(test)
test$Country
splitTest = split(test, test$Country)
testCountries = list()
for(i in 1:length(splitTest)){
df = splitTest[i]
if(grepl(":", names(df))){
df = NULL
}
else if(grepl("\\(", names(df))){
df[[1]]$Country =  gsub("\\(.*","",names(df))
}
testCountries[i] = df
}
combinedTestCountries = data.table::rbindlist(testCountries)
combinedTestCountries = combinedTestCountries[complete.cases(combinedTestCountries),]
plotData = dplyr::filter(combinedTestCountries, combinedTestCountries$Positive >=10000)
plotData= plotData[plotData$Date %in% c("10Apr", "11Apr", "12Apr", "13Apr"), ]
plotData$Country=as.character(plotData$Country)
plotData= plotData[!(plotData$Country %in% c("California", "Emilia-Romagna", "Florida", " Illinois",
"Lombardy" , "  Louisiana", "Michigan",
"New Jersey", "New York","Piedmont" ,
"Veneto", "Illinois", "Louisiana", "NewJersey","NewYork",
"Quebec","Texas")), ]
plotData$Country[plotData$Country %in% "UnitedStates"] = "US"
plotData$Country[plotData$Country %in% "UnitedKingdom"] = "United Kingdom"
plotData$Country[plotData$Country %in% "SouthKorea"] = "South Korea"
plotData = dataTest()
fig1 <- plot_ly(x = plotData$Positive_million_population, y = ~reorder(plotData$Country, plotData$Positive_million_population), name = 'Vaka Sıklığı (Milyonda)',
type = 'bar', orientation = 'h',
marker = list(color = 'rgba(50, 171, 96, 0.6)',
line = list(color = 'rgba(50, 171, 96, 1.0)', width = 1)))
fig1 <- fig1 %>% layout(yaxis = list(showgrid = FALSE, showline = FALSE, showticklabels = TRUE, domain= c(0, 0.85)),
xaxis = list(zeroline = FALSE, showline = FALSE, showticklabels = TRUE, showgrid = TRUE))
fig1 <- fig1 %>% add_annotations(xref = 'x1', yref = 'y',
x = plotData$Positive_million_population * 0.75 + 10,  y = plotData$Country,
text = paste(round(plotData$Positive_million_population, 2)),
font = list(family = 'Arial', size = 12, color = 'rgb(50, 171, 96)'),
showarrow = FALSE)%>% layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE))
fig2 <- plot_ly(x = plotData$Test_million_population, y = ~reorder(plotData$Country, plotData$Positive_million_population), name = 'Test Sıklığı (Milyonda)',
type = 'bar', orientation = 'h')
fig2 <- fig2%>% layout(yaxis = list(showgrid = FALSE, showline = FALSE, showticklabels = FALSE, domain= c(0, 0.85)),
xaxis = list(zeroline = FALSE, showline = FALSE, showticklabels = TRUE, showgrid = TRUE))
fig2 <- fig2 %>% add_annotations(xref = 'x', yref = 'y',
x = plotData$Test_million_population * 1.0 + 1150,  y = plotData$Country,
text = paste(round(plotData$Test_million_population, 2)),
font = list(family = 'Arial', size = 12),
showarrow = FALSE)%>% layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE))
fig2
fig <- subplot(fig1, fig2)
fig <- fig %>% layout(title = 'Vaka ve Test Sıklığı (Milyonda)*', font = list(size=11),
legend = list(x = 0.029, y = 1.038,
font = list(size = 12)),
margin = list(l = 100, r = 20, t = 70, b = 70),
paper_bgcolor = 'rgb(248, 248, 255)',
plot_bgcolor = 'rgb(248, 248, 255)')
fig <- fig %>% add_annotations(xref = 'paper', yref = 'paper',
x = 0, y = -0.15,
text = paste('*10-13 Nisan 2020 arasındaki veriler kullanılmıştır.'),
font = list(family = 'Arial', size = 10, color = 'rgb(150,150,150)'),
showarrow = FALSE)
fig%>% config(displayModeBar = F) %>% layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE))
library(plotly)
setwd("~/Documents/GitHub/Covid2019Turkey/")
library(plotly)
test = read.table("www/data/testsNew.txt", header=FALSE, sep = "\t")
head(test)
colnames(test) = c("Country", "Date", "Test", "Positive", "Positive_Rate", "Test_million_population", "Positive_million_population", "Ref")
head(test)
test$Country
splitTest = split(test, test$Country)
testCountries = list()
for(i in 1:length(splitTest)){
df = splitTest[i]
if(grepl(":", names(df))){
df = NULL
}
else if(grepl("\\(", names(df))){
df[[1]]$Country =  gsub("\\(.*","",names(df))
}
testCountries[i] = df
}
combinedTestCountries = data.table::rbindlist(testCountries)
combinedTestCountries = combinedTestCountries[complete.cases(combinedTestCountries),]
plotData = dplyr::filter(combinedTestCountries, combinedTestCountries$Positive >=10000)
plotData= plotData[plotData$Date %in% c("10Apr", "11Apr", "12Apr", "13Apr"), ]
plotData$Country=as.character(plotData$Country)
plotData= plotData[!(plotData$Country %in% c("California", "Emilia-Romagna", "Florida", " Illinois",
"Lombardy" , "  Louisiana", "Michigan",
"New Jersey", "New York","Piedmont" ,
"Veneto", "Illinois", "Louisiana", "NewJersey","NewYork",
"Quebec","Texas")), ]
plotData$Country[plotData$Country %in% "UnitedStates"] = "US"
plotData$Country[plotData$Country %in% "UnitedKingdom"] = "United Kingdom"
plotData$Country[plotData$Country %in% "SouthKorea"] = "South Korea"
# plotData = dataTest()
fig1 <- plot_ly(x = plotData$Positive_million_population, y = ~reorder(plotData$Country, plotData$Positive_million_population), name = 'Vaka Sıklığı (Milyonda)',
type = 'bar', orientation = 'h',
marker = list(color = 'rgba(50, 171, 96, 0.6)',
line = list(color = 'rgba(50, 171, 96, 1.0)', width = 1)))
fig1 <- fig1 %>% layout(yaxis = list(showgrid = FALSE, showline = FALSE, showticklabels = TRUE, domain= c(0, 0.85)),
xaxis = list(zeroline = FALSE, showline = FALSE, showticklabels = TRUE, showgrid = TRUE))
fig1 <- fig1 %>% add_annotations(xref = 'x1', yref = 'y',
x = plotData$Positive_million_population * 0.75 + 10,  y = plotData$Country,
text = paste(round(plotData$Positive_million_population, 2)),
font = list(family = 'Arial', size = 12, color = 'rgb(50, 171, 96)'),
showarrow = FALSE)%>% layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE))
fig2 <- plot_ly(x = plotData$Test_million_population, y = ~reorder(plotData$Country, plotData$Positive_million_population), name = 'Test Sıklığı (Milyonda)',
type = 'bar', orientation = 'h')
fig2 <- fig2%>% layout(yaxis = list(showgrid = FALSE, showline = FALSE, showticklabels = FALSE, domain= c(0, 0.85)),
xaxis = list(zeroline = FALSE, showline = FALSE, showticklabels = TRUE, showgrid = TRUE))
fig2 <- fig2 %>% add_annotations(xref = 'x', yref = 'y',
x = plotData$Test_million_population * 1.0 + 1150,  y = plotData$Country,
text = paste(round(plotData$Test_million_population, 2)),
font = list(family = 'Arial', size = 12),
showarrow = FALSE)%>% layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE))
fig2
fig <- subplot(fig1, fig2)
fig <- fig %>% layout(title = 'Vaka ve Test Sıklığı (Milyonda)*', font = list(size=11),
legend = list(x = 0.029, y = 1.038,
font = list(size = 12)),
margin = list(l = 100, r = 20, t = 70, b = 70),
paper_bgcolor = 'rgb(248, 248, 255)',
plot_bgcolor = 'rgb(248, 248, 255)')
fig <- fig %>% add_annotations(xref = 'paper', yref = 'paper',
x = 0, y = -0.15,
text = paste('*10-13 Nisan 2020 arasındaki veriler kullanılmıştır.'),
font = list(family = 'Arial', size = 10, color = 'rgb(150,150,150)'),
showarrow = FALSE)
fig%>% config(displayModeBar = F) %>% layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE))
head(plotData)
library(boot)
library(lme4)
library(arm)
library(msm)
library(nlme)
library(plyr) #plyr needs to be loaded before dplyr to avoid conflicts
library(dplyr)
set.seed(seed = 42)
P = 48; S = 10; R = 2; meanMale = 10; meanFemale = 18;
CVgFemale = 30; CVi = 10; CVa = 5; CVgMale = 30
Subject <- rep(1:P, each = S * R)
nGender = P*S*R/2
# nMale = P-nFemale
Gender <- c(rep("Female", nGender), rep("Male", nGender))
Time <- rep(1:S, each = R, times = P)
Replicate <- rep(1:R, each = 1, times = P * S)
femaleValues = rep(meanFemale*rtnorm(P/2,1,CVgFemale/100, 1-3*CVgFemale/100, 1+3*CVgFemale/100), each = S*R)
maleValues = rep(meanMale*rtnorm(P/2,1,CVgMale/100, 1-3*CVgMale/100, 1+3*CVgMale/100), each = S*R)
mean(femaleValues)
mean(maleValues)
library(boot)
library(lme4)
library(arm)
library(msm)
library(nlme)
library(plyr) #plyr needs to be loaded before dplyr to avoid conflicts
library(dplyr)
set.seed(seed = 123)
P = 48; S = 10; R = 2; meanMale = 10; meanFemale = 15;
CVgFemale = 30; CVi = 10; CVa = 5; CVgMale = 30
Subject <- rep(1:P, each = S * R)
nGender = P*S*R/2
# nMale = P-nFemale
Gender <- c(rep("Female", nGender), rep("Male", nGender))
Time <- rep(1:S, each = R, times = P)
Replicate <- rep(1:R, each = 1, times = P * S)
femaleValues = rep(meanFemale*rtnorm(P/2,1,CVgFemale/100, 1-3*CVgFemale/100, 1+3*CVgFemale/100), each = S*R)
maleValues = rep(meanMale*rtnorm(P/2,1,CVgMale/100, 1-3*CVgMale/100, 1+3*CVgMale/100), each = S*R)
mean(femaleValues)
mean(maleValues)
value1 <- c(femaleValues,maleValues)
value2 <- rep(rtnorm(S*P,1,CVi/100, 1-3*CVi/100, 1+3*CVi/100), each = R)
value3 <- rep(rtnorm(P*S*R,1,CVa/100, 1-3*CVa/100, 1+3*CVa/100), each = 1)
Measurement <- value1 * value2 * value3
output <- (data.frame(Subject, Gender, Time, Replicate, Measurement))
output$Subject <- as.factor(output$Subject)
output$Time <- as.factor(output$Time)
output$Replicate <- as.factor(output$Replicate)
output$Measurement = as.numeric(formatC(output$Measurement, format = "f"))
head(output)
boxplot(output$Measurement ~ output$Gender)
mean = aggregate(output[, "Measurement"], list(output$Gender), mean)
sd = aggregate(output[, "Measurement"], list(output$Gender), sd)
mean
sd
round(((sd$x/mean$x)*100),2)
write.table(output, "~/Documents/Studies/BiologicalVariation/Rcodes/example_data.txt", quote = F, row.names = F, sep = "\t")
test.data<-create.nested.data(P = 24, S = 10, R = 2, pop.mean = 100, CVg = 30, CVi = 10, CVa = 5)
head(test.data)
write.table(output, "~/Documents/Studies/BiologicalVariation/Rcodes//example_data.txt", quote = F, row.names = F, sep = "\t")
inputdata = test.data
normalise.nested.data <- function(inputdata){
tmp <- inputdata %>%
group_by(Subject, Time) %>%
mutate(replicate.count = n(), sample.sum = sum(Measurement, na.rm = TRUE))
output <- tmp %>%
group_by(Subject) %>%
mutate(subject_mean = sum(sample.sum, na.rm =
TRUE)/sum(replicate.count, na.rm = TRUE),
normalised_measurment = Measurement / subject_mean)
return(output)
}
normalise.nested.data(test.data)
test.data$Subject <- as.factor(test.data$Subject)
test.data$Sample <- as.factor(test.data$Sample)
test.data$Replicate <- as.factor(test.data$Replicate)
test.data <- test.data[with(test.data, order(Subject, Sample,Replicate)), ]
head(test.data)
test.data <- na.omit(test.data)
testdatafile<-normalise.nested.data(test.data)
head(testdatafile)
cv.formula <- normalised_measurment ~ (1|Subject) + (1|Subject:Sample)
sd.formula <- measurment ~ (1|Subject) + (1|Subject:Sample)
mod1<-lmer(data=testdatafile, REML = TRUE, cv.formula)
display(mod1)
ci.model <- confint(mod1)
create.new.dataset.indices<-function(inputdata, indices){
output <- {}
for(i in 1:length(indices)){
tmp<-subset(inputdata, inputdata[["Subject"]] == indices[i])
tmp$Subject<-i
output<-rbind(output,tmp)
}
return(output)
}
bootstrap.nested.data <- function(inputdata){
#these nested samples are used to find the variance, and re-sampled
# from the indices from the bootstrap samples
anova_bootstrap_nested <- function(formula, data, indices) {
d <- create.new.dataset.indices(inputdata, indices)
mod<-lmer(data = d, formula)
return(sigma.hat(mod)$sigma$'Subject:Sample')
}
anova_bootstrap <- function(formula, data, indices) {
d <- create.new.dataset.indices(inputdata, indices)
mod<-lmer(data = d, formula)
#we resample from the indices for each resampled dataset for the
# nested sampling important to use the correct subject number throught
nested <- boot(indices, statistic=anova_bootstrap_nested, R=N,
formula = formula)
return(c(sigma.hat(mod)$sigma$'Subject:Sample', var(nested$t)))
}
n.cores <- 32; B<- 1999; N<-999;
results <- boot(unique(inputdata$Subject), statistic=anova_bootstrap,
R=B,
formula = cv.formula, parallel = "multicore", ncpus =
n.cores)
return(results)
}
shiny::runApp('~/Documents/GitHub/BV')
